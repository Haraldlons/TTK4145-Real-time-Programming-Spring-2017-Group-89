3)

* Concurrency vs. Parallelism:
	Concurrency is the simultanious execution of tasks.
	Parallelism is performing several computations in parallel (using multiple hardware implementations of processing units).
	(Concurrency is the concept of running multiple tasks at once, while paralleliism is the implementation).
* Multicore:
	Multicore has become more common as the performance gain of a single core is limited by heat/physical limitations. 
* Concurrency helps solving:
	
* Programmer life:
	Concurrency can make the programmer's life easier or harder.
* Diffs between processes, threads, green threads, coroutines:
	Processes: The execution of instructions. May be made up of multiple threads of execution in some OS. 
	Threads: The smallest sequence of programmed instructions. Multiple threads can exist within one process.
	Green threads: Threads that are scheduled by a runtime library or a VM instead of natively by the OS. 
	Coroutines: TJA...
* Commands:
	pthread_create() (C/POSIX): Creates a thread.
	threading.Thread() (Python): Class that represents a thread. (POSIX threads)
	go (Go): Create a goroutine. (Multiplex coroutines onto a set of threads).
* Python GIL influences the way a Python thread behaves:
	The GIL prevents multiple native threads from executing Python Bytecodes at once. Decreases performance in multithreaded programs.
* Workaround for the GIL (module):
	Multiprocessing module, multiple interpreters. Share memory between interpreters.
* func GOMAXPROCS(n int) int:
	Sets the maximum number of CPUs that can be executing simultaneously and returns the previous setting. 
	https://golang.org/pkg/runtime/#GOMAXPROCS

	